#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
nana - Simple file compression and extraction tool
Usage: nana [file or directory path]
"""

import os
import sys
import shutil
import tarfile
import zipfile
import lzma
import concurrent.futures
import argparse
import io
import time
from pathlib import Path
from tqdm import tqdm

def identify_file_type(file_path):
    """Identify file type by extension and file header"""
    if os.path.isdir(file_path):
        return "directory"
    
    # Check by extension
    if file_path.endswith('.tar.gz') or file_path.endswith('.tgz'):
        return "tar.gz"
    elif file_path.endswith('.tar.bz2') or file_path.endswith('.tbz2'):
        return "tar.bz2"
    elif file_path.endswith('.tar'):
        return "tar"
    elif file_path.endswith('.tar.xz'):
        return "tar.xz"
    elif file_path.endswith('.zip'):
        return "zip"
    elif file_path.endswith('.xz'):
        return "xz"
    
    # Check by file header
    try:
        with open(file_path, 'rb') as f:
            header = f.read(8)
            
            # ZIP file header: 50 4B 03 04
            if header.startswith(b'\x50\x4B\x03\x04'):
                return "zip"
            
            # Gzip file header: 1F 8B
            if header.startswith(b'\x1F\x8B'):
                return "tar.gz"
            
            # BZip2 file header: 42 5A 68
            if header.startswith(b'\x42\x5A\x68'):
                return "tar.bz2"
            
            # XZ file header: FD 37 7A 58 5A 00
            if header.startswith(b'\xFD\x37\x7A\x58\x5A\x00'):
                # Try to determine if it's tar.xz
                try:
                    with lzma.open(file_path) as lzma_file:
                        lzma_data = lzma_file.read(512)
                        try:
                            with tarfile.open(fileobj=io.BytesIO(lzma_data)) as tar:
                                return "tar.xz"
                        except:
                            return "xz"
                except:
                    return "xz"
    except Exception as e:
        print(f"Error identifying file type: {e}")
    
    return "unknown"

def extract_tar_with_progress(tar_file, output_dir):
    """Extract tar file with progress bar"""
    members = tar_file.getmembers()
    for member in tqdm(members, desc="Extracting", unit="files"):
        tar_file.extract(member, path=output_dir)
    return True

def extract_zip_with_progress(zip_file, output_dir):
    """Extract zip file with progress bar"""
    members = zip_file.infolist()
    for member in tqdm(members, desc="Extracting", unit="files"):
        zip_file.extract(member, path=output_dir)
    return True

def extract_file(file_path, output_dir=None):
    """Extract file based on its type with progress bar"""
    try:
        if output_dir is None:
            output_dir = os.path.dirname(file_path) or '.'
        
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        file_type = identify_file_type(file_path)
        
        print(f"Extracting file {file_path}...")
        
        if file_type in ["tar.gz", "tar.bz2", "tar", "tar.xz"]:
            with tarfile.open(file_path) as tar:
                extract_tar_with_progress(tar, output_dir)
        
        elif file_type == "zip":
            with zipfile.ZipFile(file_path) as zip_ref:
                extract_zip_with_progress(zip_ref, output_dir)
        
        elif file_type == "xz":
            # XZ typically compresses a single file, not an archive
            output_file = os.path.splitext(os.path.basename(file_path))[0]
            output_path = os.path.join(output_dir, output_file)
            
            with lzma.open(file_path) as f_in:
                total_size = os.path.getsize(file_path)
                with open(output_path, 'wb') as f_out:
                    with tqdm(total=total_size, desc="Extracting", unit="B", unit_scale=True) as pbar:
                        for data in iter(lambda: f_in.read(4096), b''):
                            f_out.write(data)
                            pbar.update(len(data))
        
        else:
            print(f"Unsupported file type: {file_path}")
            return False
        
        print(f"Successfully extracted {file_path} to {output_dir}")
        return True
    
    except Exception as e:
        print(f"Error extracting {file_path}: {e}")
        return False

def get_all_files(directory):
    """Get all files in a directory recursively"""
    file_list = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_list.append(file_path)
    return file_list

def compress_directory(directory_path, compression_type="tar.gz", output_path=None):
    """Compress directory with progress bar"""
    try:
        dir_name = os.path.basename(directory_path.rstrip('/\\'))
        
        if output_path is None:
            if compression_type == "tar.gz":
                output_path = f"{directory_path}.tar.gz"
            elif compression_type == "tar.bz2":
                output_path = f"{directory_path}.tar.bz2"
            elif compression_type == "zip":
                output_path = f"{directory_path}.zip"
            elif compression_type == "xz":
                output_path = f"{directory_path}.tar.xz"
        
        print(f"Compressing directory {directory_path}...")
        
        # Get all files to compress
        files = get_all_files(directory_path)
        base_dir = os.path.dirname(directory_path)
        
        if compression_type in ["tar.gz", "tar.bz2", "tar.xz"]:
            mode = ""
            if compression_type == "tar.gz":
                mode = "w:gz"
            elif compression_type == "tar.bz2":
                mode = "w:bz2"
            elif compression_type == "tar.xz":
                mode = "w:xz"
                
            with tarfile.open(output_path, mode) as tar:
                for file in tqdm(files, desc="Compressing", unit="files"):
                    arcname = os.path.relpath(file, base_dir)
                    tar.add(file, arcname=arcname)
        
        elif compression_type == "zip":
            with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for file in tqdm(files, desc="Compressing", unit="files"):
                    arcname = os.path.relpath(file, base_dir)
                    zipf.write(file, arcname)
        
        else:
            print(f"Unsupported compression type: {compression_type}")
            return False
        
        print(f"Successfully compressed {directory_path} to {output_path}")
        return True
    
    except Exception as e:
        print(f"Error compressing {directory_path}: {e}")
        return False

def process_file(file_path, output_dir=None, compression_type="tar.gz"):
    """Process file or directory"""
    if os.path.isdir(file_path):
        return compress_directory(file_path, compression_type)
    else:
        return extract_file(file_path, output_dir)

def main():
    parser = argparse.ArgumentParser(description='nana - File compression and extraction tool')
    parser.add_argument('file', metavar='FILE', type=str,
                      help='file or directory to process')
    parser.add_argument('-o', '--output', type=str, default=None,
                      help='output directory (default: current directory)')
    parser.add_argument('-t', '--type', type=str, default=None,
                      choices=['tar.gz', 'tar.bz2', 'zip', 'xz'],
                      help='compression type (default: tar.gz)')
    parser.add_argument('-j', '--jobs', type=int, default=4,
                      help='number of parallel jobs (default: 4)')
    
    args = parser.parse_args()
    
    start_time = time.time()
    
    # Process single file or directory
    file_path = args.file
    
    if not os.path.exists(file_path):
        print(f"Error: File or directory '{file_path}' does not exist")
        return 1
    
    # If compression type not specified, use tar.gz by default
    compression_type = args.type if args.type else "tar.gz"
    
    result = process_file(file_path, args.output, compression_type)
    
    end_time = time.time()
    print(f"Total time: {end_time - start_time:.2f} seconds")
    
    return 0 if result else 1

if __name__ == "__main__":
    sys.exit(main())
